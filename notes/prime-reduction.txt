Attempted to add logic that determines if the prime that they are about to check is larger than the number in question
divided by the previous prime than it is determined as a prime.

For instance we will look at the progression of determining if 29 is a prime or not.

29 % 2 = 1
29 / 2 = 14.5
(3 > 14.5) = 0
29 % 3 = 2
29 / 3 = 9.666666667
(5 > 9.6666667) = 0
29 % 5 = 4
29 / 5 = 5.8
(7 > 5.8) = 1
29 is a prime.

The square root method is a little different. sqrt(29) = 5.385...
(2 > 5.385) = 0
29 % 2 = 1
(3 > 5.385) = 0
29 % 3 = 1
(5 > 5.385) = 0
29 % 5 = 1
(7 > 5.385) = 1
29 is prime.

The first set has 9 steps and the second step has 7 steps meaning the second step is shorter, infact, this is the case for
every prime number. For instance, comparing the time of each to calculate the first 1 million primes with eachmethod leads to 
the following output:

(Using Square Root)
real	0m16.431s
user	0m16.420s
sys	0m0.008s
process 0 

(Using Prime Reduction)
real	0m23.738s
user	0m23.728s
sys	0m0.004s
process 0

So for this reason I will not add prime reduction into the programming.
